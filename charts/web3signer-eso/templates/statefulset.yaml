apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "web3signer.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
        runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
        runAsUser: {{ .Values.securityContext.runAsUser | default 10000 }}
        readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
      initContainers:
        - name: init
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
            runAsUser: {{ .Values.securityContext.runAsUser | default 10000 }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
          command:
            - sh
            - -ac
            - >
              mkdir -p /data/web3signer /data/keystore;
              chown -R {{ .Values.podSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} /data/web3signer
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          volumeMounts:
            - name: data
              mountPath: /data
        - name: migrations
          image: "{{ .Values.flywayImage.repository }}:{{ .Values.flywayImage.tag }}"
          imagePullPolicy: {{ .Values.flywayImage.pullPolicy }}
          securityContext:
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
            runAsUser: {{ .Values.securityContext.runAsUser | default 10000 }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
          args:
            - -user=$(ESO_DB_USERNAME)
            - -password=$(ESO_DB_PASSWORD)
            - -url=$(ESO_DB_URL)
            - migrate
          # for first time clean may be needed, be careful not remove production db
          # flyway -user=$ESO_DB_USERNAME -password=$ESO_DB_PASSWORD -url=$ESO_DB_URL clean -cleanDisabled=false
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          volumeMounts:
            - name: migrations
              mountPath: /flyway/sql
        - name: fetch-keys
          image: "{{ .Values.cliImage.repository }}:{{ .Values.cliImage.tag }}"
          imagePullPolicy: {{ .Values.cliImage.pullPolicy }}
          securityContext:
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
            runAsUser: {{ .Values.securityContext.runAsUser | default 10000 }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          args: ["sync-web3signer-keys", "--db-url", $(ESO_DB_KEYSTORE_URL), "--output-dir", "/data/keystore", "--decryption-key-env", "ESO_DECRYPTION_KEY_V2"]
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
            runAsUser: {{ .Values.securityContext.runAsUser | default 10000 }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            - --config-file=/config/config.yaml
            - eth2
            - --slashing-protection-db-url=$(ESO_DB_URL)
            - --slashing-protection-db-username=$(ESO_DB_USERNAME)
            - --slashing-protection-db-password=$(ESO_DB_PASSWORD)
          env:
            - name: JAVA_OPTS
              value: {{ .Values.web3signerJavaOpts | quote }}
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          ports:
            - name: http
              containerPort: {{ .Values.httpPort }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /upcheck
              port: http
            initialDelaySeconds: 900
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /upcheck
              port: http
            initialDelaySeconds: 60
            timeoutSeconds: 3
            periodSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
        - name: fetch-keys-reloader
          image: "{{ .Values.cliImage.repository }}:{{ .Values.cliImage.tag }}"
          imagePullPolicy: {{ .Values.cliImage.pullPolicy }}
          securityContext:
            runAsNonRoot: {{ .Values.securityContext.runAsNonRoot | default true }}
            runAsUser: {{ .Values.securityContext.runAsUser | default 10000 }}
            readOnlyRootFilesystem: {{ .Values.securityContext.readOnlyRootFilesystem | default true }}
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          args: ["sync-web3signer-keys", "--db-url", $(ESO_DB_KEYSTORE_URL), "--output-dir", "/data/keystore", "--decryption-key-env", "ESO_DECRYPTION_KEY_V2", "--refresh-frequency", "60"]
          volumeMounts:
            - name: data
              mountPath: /data
      volumes:
        - name: config
          configMap:
            name: {{ include "common.names.fullname" . }}
        - name: migrations
          configMap:
            name: {{ include "common.names.fullname" . }}-migrations
        - name: data
          emptyDir:
            medium: Memory
            sizeLimit: 128Mi