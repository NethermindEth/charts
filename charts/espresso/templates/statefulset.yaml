{{- range $type, $specs := .Values.nodes }}
---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" $ }}
kind: StatefulSet
metadata:
  name: "{{ include "common.names.fullname" $ }}-{{ $type }}"
  {{- if $.Values.global.namespaceOverride }}
  namespace: {{ $.Values.global.namespaceOverride }}
  {{- end }}
spec:
  serviceName: "{{ include "common.names.fullname" $ }}-{{ $type }}"
  replicas: {{ $specs.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" $ | nindent 6 }}
      type: {{ $type }}
  template:
    metadata:
      labels:
        {{- include "common.labels.matchLabels" $ | nindent 8 }}
        type: {{ $type }}
    spec:
      serviceAccountName: {{ include "common.names.fullname" $ }}
      {{- if $.Values.externalSecrets.enabled }}
      initContainers:
        - name: keygen  # Generates keys for the sequencer
          image: {{ include "espresso.build_image_name" (list $.Values.image.repository $.Values.image.tag) }}
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: ["keygen", "-o", "/keys", "-n", "{{ $specs.replicaCount }}"]
          volumeMounts:
          - name: keys
            mountPath: /keys
        - name: keystore-cli-pv-keys  # Updates Secret Manager with private keys in the proper format
          image: {{ include "espresso.build_image_name" (list $.Values.keystoreCLI.image.repository $.Values.keystoreCLI.image.tag) }}
          imagePullPolicy: {{ $.Values.keystoreCLI.image.pullPolicy }}
          args: ["pv-keys"]
          env:
          - name: KEYS_PATH
            value: /keys
          - name: PROJECT_ID
            value: {{ (required "Project ID is required" $.Values.keystoreCLI.projectId) | quote }}
          - name: SECRET_ID
            value: {{ required "Secret ID is required" $.Values.keystoreCLI.pv.secretId }}-{{ $type }}
          volumeMounts:
          - name: keys
            mountPath: /keys
        {{- if $specs.sqlStorage }}
        - name: keystore-cli-db-keys  # Updates Secret Manager with DB credentials in the proper format
          image:  {{ include "espresso.build_image_name" (list $.Values.keystoreCLI.image.repository $.Values.keystoreCLI.image.tag) }}
          imagePullPolicy: {{ $.Values.keystoreCLI.image.pullPolicy }}
          args: ["db-keys"]
          env:
          - name: PROJECT_ID
            value: {{ (required "Project ID is required" $.Values.keystoreCLI.projectId) | quote }}
          - name: SECRET_ID
            value: {{ required "Secret ID is required" $.Values.keystoreCLI.db.secretId }}
          - name: SEQUENCER_POSTGRES_HOST
            value: {{ (required "DB host is required" $.Values.keystoreCLI.db.host) | quote }}
          - name: SEQUENCER_POSTGRES_USER
            value: {{ (required "DB user is required" $.Values.keystoreCLI.db.user) | quote }}
          volumeMounts:
          - name: keys
            mountPath: /keys
        {{- end }}
        - name: init-setenv   # Sets keys environment variables for the sequencer
          image: {{ include "espresso.build_image_name" (list $.Values.initImage.repository $.Values.initImage.tag) }}
          imagePullPolicy: {{ $.Values.initImage.pullPolicy }}
          command: ["/bin/sh", "-c"]
          args:
            - |
              function process_key() {
                local key_var=$1
                local prefix=$2
                local final_var=$3

                # Extract the value for the specified indexed key from the environment
                # Using quotes to ensure complete variable names are matched properly
                local key_full=$(env | grep -e $key_var)

                # Check if the string starts with the prefix and remove it
                local key_value
                if [[ $key_full == $prefix* ]]; then
                    key_value="${key_full#$prefix}"
                else
                    key_value="$key_full"
                fi

                # Construct the final key name
                #local final_key="${key_value//${key_var}=${final_var}="}
                local final_key="${key_value//$key_var/${final_var}}"

                echo "$final_key"
              }
              # Get the index from the hostname
              index=$(hostname | grep -o -E "[0-9]+$")
              echo "Detected Pod Index: $index"

              # Construct the variable names
              state_key_var="ESPRESSO_SEQUENCER_PRIVATE_STATE_KEY_$index"
              staking_key_var="ESPRESSO_SEQUENCER_PRIVATE_STAKING_KEY_$index"
              key_prefix="espresso-sequencer-private-keys-{{ $type }}="
              {{- if $specs.sqlStorage }}
              postgres_host_var="ESPRESSO_SEQUENCER_POSTGRES_HOST"
              postgres_user_var="ESPRESSO_SEQUENCER_POSTGRES_USER"
              postgres_pass_var="ESPRESSO_SEQUENCER_POSTGRES_PASSWORD"
              postgres_prefix="espresso-sequencer-postgres-{{ $type }}="
              {{- end }}

              # Process each key and write to the .env file
              echo "$(process_key $state_key_var $key_prefix "ESPRESSO_SEQUENCER_PRIVATE_STATE_KEY")" > /etc/espresso/.env
              echo "$(process_key $staking_key_var $key_prefix "ESPRESSO_SEQUENCER_PRIVATE_STAKING_KEY")" >> /etc/espresso/.env
              {{- if $specs.sqlStorage }}
              echo "$(process_key $postgres_host_var $postgres_prefix "ESPRESSO_SEQUENCER_POSTGRES_HOST")" >> /etc/espresso/.env
              echo "$(process_key $postgres_user_var $postgres_prefix "ESPRESSO_SEQUENCER_POSTGRES_USER")" >> /etc/espresso/.env
              echo "$(process_key $postgres_pass_var $postgres_prefix "ESPRESSO_SEQUENCER_POSTGRES_PASSWORD")" >> /etc/espresso/.env
              {{- end }}
              echo "Dot env file content:"
              cat /etc/espresso/.env 
          envFrom:
            - secretRef:
                name: eso-espresso-sequencer-secrets-{{ $type }}
          volumeMounts:
            - name: init-env
              mountPath: /etc/espresso
      {{- end }}
      containers:
        - name: "sequencer-{{ $type }}"
          image: {{ include "espresso.build_image_name" (list $.Values.image.repository $.Values.image.tag) }} 
          imagePullPolicy: {{ $.Values.image.pullPolicy }}
          command: {{ toYaml $specs.command | nindent 12 }}
          env:
            {{- range $key, $value := $.Values.nodes_config }}
            - name: {{ $key }}
              value: {{ required (printf "%s is required" $key) $value | quote }}
            {{- end }}
          {{- if $.Values.externalSecrets.enabled }}
            - name: ESPRESSO_SEQUENCER_KEY_FILE
              value: /etc/espresso/.env
          envFrom:
            - secretRef:
                name: eso-espresso-sequencer-secrets-{{ $type }}
          {{- end }}
          ports:
            - name: api
              containerPort: {{ $.Values.nodes_config.ESPRESSO_SEQUENCER_API_PORT }}
          {{- if or $specs.volumeMount $.Values.externalSecrets.enabled }}
          volumeMounts:
            {{- if $specs.volumeMount }}
            - name: consensus-data
              mountPath: {{ $.Values.nodes_config.ESPRESSO_SEQUENCER_STORAGE_PATH }}
            {{- end }}
            {{- if $.Values.externalSecrets.enabled }}
            - name: init-env
              mountPath: /etc/espresso
            {{- end }}
          {{- end }}
          {{- with $specs.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
          {{- end }}
        - name: diagnostic-container
          image: busybox
          command: ["sleep", "infinity"]
          envFrom:
            - secretRef:
                name: eso-espresso-sequencer-secrets-{{ $type }}
          volumeMounts:
            - name: init-env
              mountPath: /etc/espresso
      volumes:
        - name: keys
          emptyDir: {}
        - name: init-env
          emptyDir: {}
  volumeClaimTemplates:
    {{- if $specs.volumeMount }}
    - metadata:
        name: consensus-data
        labels:
          {{- include "common.labels.statefulset" $ | nindent 8 }}
      {{- with $.Values.global.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ $.Values.global.persistence.accessModes }}
        storageClassName: {{ $.Values.global.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ $.Values.global.persistence.size | quote }}
    {{- end }}
{{- end }}
