global:
  # -- Service account
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
  #
  serviceAccount:
    create: false
    annotations: {}

  suffix: ""

  namespaceOverride: ""

  # -- Whether or not to allocate persistent volume disk for the data directory.
  # In case of node failure, the node data directory will still persist.
  #
  persistence:
    storageClassName: ""
    accessModes:
      - ReadWriteOnce
    size: 150Gi
    annotations: {}
  
  rbac:
    create: true

nodes:
  normal:
    replicaCount: 1
    command:
      - "sequencer"
      - "--"
      - "http"
      - "--"
      - "catchup"
      - "--"
      - "status"
    sqlStorage: false
    volumeMount: true
    resources:
      requests:
        memory: "12000Mi"
    externalSecrets:
      data: []
  da:
    replicaCount: 0
    command:
      - "sequencer"
      - "--"
      - "storage-sql"
      - "--"
      - "http"
      - "--"
      - "catchup"
      - "--"
      - "status"
      - "--"
      - "query"
    sqlStorage: true
    volumeMount: false
    resources:
      requests:
        memory: "12000Mi"
    externalSecrets:
      data: []

nodes_config:
  ESPRESSO_SEQUENCER_ORCHESTRATOR_URL: https://orchestrator.cappuccino.testnet.espresso.network
  ESPRESSO_SEQUENCER_CDN_ENDPOINT: "cdn.cappuccino.testnet.espresso.network:1737"
  ESPRESSO_STATE_RELAY_SERVER_URL: https://state-relay.cappuccino.testnet.espresso.network
  ESPRESSO_SEQUENCER_BASE_FEE: 0
  ESPRESSO_SEQUENCER_MAX_BLOCK_SIZE: "30000000"
  ESPRESSO_SEQUENCER_CHAIN_ID: 0
  RUST_LOG: "warn,libp2p=off"
  RUST_LOG_FORMAT: "json"
  ESPRESSO_SEQUENCER_STATE_PEERS: https://query.cappuccino.testnet.espresso.network
  ESPRESSO_SEQUENCER_L1_PROVIDER: ""   # JSON-RPC endpoint for Sepolia testnet
  ESPRESSO_SEQUENCER_API_PORT: 80      # Port on which to host metrics and healthchecks
  ESPRESSO_SEQUENCER_STORAGE_PATH: "/mount/sequencer/store/"    # Path in container to store consensus state

image:
  repository: ghcr.io/espressosystems/espresso-sequencer/sequencer
  tag: main
  pullPolicy: IfNotPresent

# -- Init image is used to manage which secrets the pod should use.
initImage:
  repository: "bitnami/kubectl"
  tag: "1.28"
  pullPolicy: IfNotPresent

# -- Keystore-CLI settings. Used to manage keys on Secret Store.
keystoreCLI:
  image:
    repository: "nethermindeth/espresso-keystore-cli"
    tag: "v0.1.1"
    pullPolicy: IfNotPresent
  projectId: ""  # GCP Project ID
  pv:
    secretId: ""   # GCP Secret ID without the Sequencer node type suffix
  db:
    secretId: ""   # GCP Secret ID of the DB credentials
    host: ""       # DB host
    user: ""       # DB user

service:
  type: ClusterIP
  # Port will target ESPRESSO_SEQUENCER_API_PORT
  annotations: {}

serviceMonitor:
  # -- The namespace in which the ServiceMonitor will be created
  namespace: ""
  # -- The interval at which metrics should be scraped
  # interval: 30s
  # -- The timeout after which the scrape is ended
  scrapeTimeout: ""
  # -- Metrics RelabelConfigs to apply to samples before scraping.
  relabellings: []
  # -- Metrics RelabelConfigs to apply to samples before ingestion.
  metricRelabelings: []
  # -- Specify honorLabels parameter to add the scrape endpoint
  honorLabels: false
  # -- Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
  additionalLabels: {}
# -- Custom PrometheusRule to be defined
# ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
#
prometheusRule:
  # -- Create a default set of Alerts
  default: true
  # -- The namespace in which the prometheusRule will be created
  namespace: ""
  # -- Additional labels for the prometheusRule
  additionalLabels: {}
  # -- Custom Prometheus rules
  rules: []

ingress:
  enabled: false
  className: ""

  # -- Route Prefix. Can skip it if any item of path has the path defined.
  routePrefix: /

  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  labels: {}

  # -- Hostnames.
  # Can be provided if Ingress is enabled.
  hosts: []
  # hosts:
  #   - host: espresso.example.com
  #     -- Paths to use for ingress rules
  #     paths:
  #       - path: "/metrics"
  #         port: 9000
  #         pathType: "Prefix"
  #       - path: "/api"
  #         port: 8080
  #         pathType: "Exact"
  #       - path: "/health"
  #         port: 8085
  #         pathType: "Prefix"
  #         serviceName: "alternativeServiceName"
  #   - paths:
  #       - path: "/metrics"
  #         port: 9000
  #         pathType: "Prefix"
  #     By default, the Service created by this chart is used as the target
  #     Service for the Ingress.
  #     If not defined the following default object will be used:
  #     hosts:
  #       paths:
  #       - path: "/"
  #         port: 8000
  #         pathType: "ImplementationSpecific"
  #         serviceName: "<common.names.fullname>"


  # -- TLS configuration for Ingress
  # Secret must be manually created in the namespace
  #
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

externalSecrets:
  enabled: false
  secretStoreRef:
    name: secretStoreRef
    kind: SecretStore

# -- Provide a name to substitute for the full names of resources
fullnameOverride: ""

# -- Service account
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
#
serviceAccount:
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  #
  name: ""

rbac:
  # -- The name of the role to use.
  # If not set and create is true, a name is generated using the fullname template
  #
  name: ""
  create: true
  # -- Required ClusterRole rules
  clusterRules:
   # # -- Required to create ServiceMonitor CRD
    # #
    - apiGroups: [""]
      resources:
      - "services"
      - "endpoints"
      verbs:
      - "get"
      - "list"
      - "watch"
  # -- Required Role rules
  rules:
    # -- Required to create Sequencer env Secret.
    #
    - apiGroups: [""]
      resources:
      - "secrets"
      verbs:
      - "create"
      - "get"
      - "list"
      - "watch"
      - "delete"
    - apiGroups: [""]
      resources:
      - "services"
      verbs:
      - "get"
      - "list"
      - "watch"
