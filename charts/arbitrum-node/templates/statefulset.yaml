---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.statefulset" . | nindent 4 }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
        execution: {{ .Values.execution.client }}
    spec:
    {{- with (concat .Values.global.imagePullSecrets .Values.global.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.global.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
      securityContext:
        {{- toYaml .Values.global.podSecurityContext | nindent 8 }}
    {{- if .Values.global.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.global.terminationGracePeriodSeconds }}
    {{- end }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      priorityClassName: {{ .Values.global.priorityClassName | quote }}
      containers:
        {{/* Container used for Execution clients: Nethermind, Geth, Besu, Erigon */}}
        - name: execution
          image: "{{ (pluck .Values.execution.client .Values.global.image.execution | first ).repository }}:{{ (pluck .Values.execution.client .Values.global.image.execution | first ).tag }}"
          imagePullPolicy: {{ .Values.global.image.imagePullPolicy }}
          {{/* Configuration for Nethermind execution client */}}
          {{- if eq .Values.execution.client "nitro" }}
          args:
            - --chain.name={{ .Values.global.network }}
            - --parent-chain.connection.url={{ .Values.execution.l1.url }}
            - --parent-chain.blob-client.beacon-url={{ .Values.execution.l1.beacon.url }}
            - --persistent.chain=/data/execution
            - --ws.port=8548
            - --ws.addr=0.0.0.0
            - --ws.origins=*
            - --http.addr=0.0.0.0
            - --http.api=net,web3,eth,arb,debug
            - --http.corsdomain=*
            - --http.vhosts=*
            - --metrics
            - --metrics-server.addr=0.0.0.0
            - --metrics-server.port=8008
            {{- if .Values.execution.snapshot.enabled }}
            - --init.url={{ .Values.execution.snapshot.url }}
            - --init.download-path=/data/execution	
            {{- end }}
            {{- range .Values.execution.extraFlags }}
              {{ . }}
            {{- end }}
          {{- else }}
          command:
            - sh
            - -ac
            - >
              {{- if .Values.global.p2pNodePort.enabled }}
              . /env/init-nodeport;
              {{- end }}
            {{/* Configuration for Geth execution client */}}
            {{- if eq .Values.execution.client "geth" }}
              exec geth
              --syncmode=snap
              --datadir=/data/execution
              --ipcdisable
              --op-network={{ .Values.execution.network }}
            {{- if .Values.global.externalSecrets.enabled }}
              --authrpc.jwtsecret=/external-secrets/JWT_SECRET
            {{- else if .Values.global.JWTSecret}}
              --authrpc.jwtsecret=/secret/jwtsecret
            {{- end }}
              --authrpc.addr={{ .Values.execution.jsonrpc.host }}
              --authrpc.port={{ .Values.execution.jsonrpc.engine.port }}
              --authrpc.vhosts={{ .Values.execution.jsonrpc.engine.hostAllowList | join "," }}
            {{- if .Values.execution.jsonrpc.enabled }}
              --http
              --http.addr={{ .Values.execution.jsonrpc.host }}
              --http.port={{ .Values.execution.jsonrpc.http.port }}
              --http.corsdomain={{ .Values.execution.jsonrpc.http.corsOrigins | join "," }}
              --http.vhosts={{ .Values.execution.jsonrpc.http.hostAllowList | join "," }}
              --http.api={{ .Values.execution.jsonrpc.namespaces.geth | join "," }}
            {{- if .Values.execution.jsonrpc.websocket.enabled }}
              --ws
              --ws.addr={{ .Values.execution.jsonrpc.host }}
              --ws.port={{ .Values.execution.jsonrpc.websocket.port }}
              --ws.origins={{ .Values.execution.jsonrpc.websocket.origins }}
              --ws.api={{ .Values.execution.jsonrpc.namespaces.geth | join "," }}
            {{- end }}
            {{- end }}
              --maxpeers={{ .Values.execution.targetPeers }}
            {{- if .Values.global.p2pNodePort.enabled }}
              --nat=extip:$EXTERNAL_IP
              --port=$EXTERNAL_EXECUTION_PORT
            {{- else }}
              --nat=extip:$POD_IP
              --port={{ include "execution.p2pPort" . }}
            {{- end }}
            {{- if .Values.execution.terminalTotalDifficulty }}
              --override.geth.terminaltotaldifficulty={{ .Values.execution.terminalTotalDifficulty }}
            {{- end }}
            {{- if and .Values.global.metrics.enabled .Values.execution.metrics.enabled }}
              --metrics
              --metrics.port={{ .Values.execution.metrics.port }}
              --metrics.addr={{ .Values.execution.metrics.host }}  
            {{- end }}
            {{- /* Configuration for Besu execution client */}}
            {{- else if eq .Values.execution.client "besu" }}
              exec /opt/besu/bin/besu
              --network={{ .Values.global.network }}
              --data-path=/data/execution
              --sync-mode=X_SNAP
              --p2p-enabled=true
            {{- if or .Values.global.externalSecrets.enabled }}
              --engine-jwt-secret=/external-secrets/JWT_SECRET
            {{- else if .Values.global.JWTSecret}}
              --engine-jwt-secret=/secret/jwtsecret
            {{- end }}
              --engine-rpc-enabled=true
              --engine-host-allowlist={{ .Values.execution.jsonrpc.engine.hostAllowList | join "," }}
              --engine-rpc-port={{ .Values.execution.jsonrpc.engine.port | join "," }}
            {{- if .Values.execution.jsonrpc.enabled }}
              --rpc-http-enabled=true
              --rpc-http-host={{ .Values.execution.jsonrpc.host }}
              --rpc-http-port={{ .Values.execution.jsonrpc.http.port }}
              --rpc-http-cors-origins={{ .Values.execution.jsonrpc.http.corsOrigins | join "," }}
              --host-allowlist={{ .Values.execution.jsonrpc.http.hostAllowList | join "," }}
            {{- end }}
            {{- if and .Values.global.metrics.enabled .Values.execution.metrics.enabled }}
              --metrics-enabled=true
              --metrics.port={{ .Values.execution.metrics.port }}
              --metrics.addr={{ .Values.execution.metrics.host }}  
            {{- end }}
            {{- /* Configuration for Erigon execution client */}}
            {{- else if eq .Values.execution.client "erigon" }}
              exec erigon
              --datadir=/data/execution
              --private.api.addr={{ .Values.execution.privateApiAddr }}
              --chain={{ .Values.global.network }}
            {{- if .Values.global.p2pNodePort.enabled }}
              --nat=extip:$EXTERNAL_IP
              --port=$EXTERNAL_EXECUTION_PORT
            {{- else }}
              --nat=extip:$POD_IP
              --port={{ include "execution.p2pPort" . }}
            {{- end }}
            {{- if .Values.execution.terminalTotalDifficulty }}
              --override.terminaltotaldifficulty={{ .Values.execution.terminalTotalDifficulty }}
            {{- end }}
            {{- if .Values.global.externalSecrets.enabled }}
              --authrpc.jwtsecret=/external-secrets/JWT_SECRET
            {{- else if .Values.global.JWTSecret}}
              --authrpc.jwtsecret=/secret/jwtsecret
            {{- end }}
              --authrpc.addr={{ .Values.execution.jsonrpc.host }}
              --authrpc.port={{ .Values.execution.jsonrpc.engine.port }}
              --authrpc.vhosts={{ .Values.execution.jsonrpc.engine.hostAllowList | join "," }}
            {{- if .Values.execution.jsonrpc.enabled }}
              --http
              --http.addr={{ .Values.execution.jsonrpc.host }}
              --http.port={{ .Values.execution.jsonrpc.http.port }}
              --http.corsdomain={{ .Values.execution.jsonrpc.http.corsOrigins | join "," }}
              --http.vhosts={{ .Values.execution.jsonrpc.http.hostAllowList | join "," }}
              --http.api={{ .Values.execution.jsonrpc.namespaces.erigon | join "," }}
            {{- if .Values.execution.jsonrpc.websocket.enabled }}
              --ws
            {{- end }}
            {{- end }}
            {{- if .Values.global.metrics.enabled }}
              --metrics
              --metrics.addr={{ .Values.execution.metrics.host }}
              --metrics.port={{ .Values.execution.metrics.port }}
            {{- end }}
            {{- end }}
            {{- range .Values.execution.extraFlags }}
              {{ . }}
            {{- end }}
            {{- end}}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          {{- if .Values.global.externalSecrets.enabled }}
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          {{- end }}
          ports:
            {{- if .Values.execution.jsonrpc.enabled }}
            - name: jsonrpc-exec
              containerPort: {{ .Values.execution.jsonrpc.http.port }}
            {{- if .Values.execution.jsonrpc.websocket.enabled }}
            - name: ws-exec
              containerPort: {{ .Values.execution.jsonrpc.websocket.port }}
            {{- end }}
            {{- end }}
            {{- if and .Values.global.metrics.enabled .Values.execution.metrics.enabled }}
            - name: metrics-exec
              containerPort: {{ .Values.execution.metrics.port }}
            {{- end }}
          volumeMounts:
          {{- if .Values.global.sharedPersistence.enabled }}
            - name: data
              mountPath: /data
          {{- else }}
            - name: data-execution
              mountPath: /data/execution
          {{- end }}
            {{- if .Values.global.externalSecrets.enabled }}
            - name: external-secrets
              mountPath: /external-secrets
              readOnly: true
            {{- end }}
            {{- if .Values.global.JWTSecret }}
            - name: jwtsecret
              mountPath: /secret
              readOnly: true
            {{- end }}
            - name: env-nodeport
              mountPath: /env
          {{- with .Values.execution.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
          {{- end }}
      volumes:
        - name: scripts-init
          configMap:
            name: {{ include "common.names.fullname" . }}-init
      {{- if .Values.global.JWTSecret }}
        - name: jwtsecret
          secret:
            secretName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.global.externalSecrets.enabled }}
        - name: external-secrets
          secret:
            secretName: eso-{{ include "common.names.fullname" . }}
      {{- end }}
        - name: env-nodeport
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data-execution
        labels:
          {{- include "common.labels.statefulset" . | nindent 10 }}
      {{- with .Values.execution.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ .Values.execution.persistence.accessModes }}
        storageClassName: {{ .Values.execution.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.execution.persistence.size | quote }}