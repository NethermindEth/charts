---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
    spec:
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "vouch.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init
          image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -ac
            - >
              mkdir -p /data/vouch/client1/certs/;
              cp /config/vouch.yaml /data/vouch/;
              printenv vouch-ca.crt | base64 -d  > /data/vouch/client1/certs/ca.crt;
              printenv vouch-ca.key | base64 -d  > /data/vouch/client1/certs/ca.key;
              bash /scripts/generate_cert.sh /data/vouch/client1/certs/ ca client1;
              # printenv client1.crt | base64 -d  > /data/vouch/client1/certs/client1.crt;
              # printenv client1.key | base64 -d  > /data/vouch/client1/certs/client1.key;
              chown -R {{ .Values.podSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} /data/vouch;
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
            - name: scripts
              mountPath: /scripts
        - name: sync-config
          image: "{{ .Values.cliImage.repository }}:{{ .Values.cliImage.tag }}"
          imagePullPolicy: {{ .Values.cliImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          args:
          - "sync-vouch-config"
          - "--db-url-env"
          - "ESO_DB_KEYSTORE_URL"
          - "--vouch-dir"
          - "/data/vouch"
          - "--relays"
          - "{{ .Values.relays }}"
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
            - name: scripts
              mountPath: /scripts
      containers:
        - name: vouch
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          args: [ "--base-dir", "/data/vouch" ]
          ports:
            - name: http
              containerPort: {{ .Values.service.httpPort }}
              protocol: TCP
            - name: metrics
              containerPort: {{ .Values.metricsPort }}
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
            - name: scripts
              mountPath: /scripts
        - name: sleeper
          image: "bash:latest"
          imagePullPolicy: {{ .Values.initImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" . }}
          command: [ "/usr/local/bin/bash", "-c", "--" ]
          args: [ "while true; do sleep 30; done;" ]
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
            - name: scripts
              mountPath: /scripts
      volumes:
        - name: config
          configMap:
            name: {{ include "common.names.fullname" . }}
        - name: scripts
          configMap:
            name: {{ include "common.names.fullname" . }}-scripts
        - name: data
          emptyDir:
            medium: Memory
            sizeLimit: 128Mi