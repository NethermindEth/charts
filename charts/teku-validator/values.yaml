# Default values for operator.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## Provide a name in place of operator for `app:` labels
##
nameOverride: ""

## Provide a name to substitute for the full names of resources
##
fullnameOverride: ""

## Pod Security Context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
##
securityContext:
  fsGroup: 1001
  runAsUser: 1001

## RBAC configuration.
## ref: https://kubernetes.io/docs/reference/access-authn-authz/rbac/
##
rbac:
  create: true

## Init image is used to chown data volume, initialise genesis, etc.
##
initImageBusybox:
  repository: "busybox"
  tag: "1.35"
  pullPolicy: IfNotPresent


## Configuration for validators
## ref: https://lighthouse-book.sigmaprime.io/validator-management.html
## ref: https://docs.prylabs.network/docs/getting-started
##

## Whether to enable validator statefulset or not
## Can be used to temporarily disable validators 
## until synchronization of eth1/eth2 nodes is complete
##
enabled: true

## Reimport Keystores
## Set the value to true if you added new keystores
## to the vault or you just need to re-sync the state.
## Options: true, false
##
reimportKeystores: true

## How many validators to run
## with validatorsIndexStart = -1 and validatorsIndexEnd = 4 => 5 validators
validatorsIndexEnd: 0
validatorsIndexStart: -1 # If you want to start with validator0 service name put -1 there

## Validators image version
## ref: https://gcr.io/prysmaticlabs/prysm/validator
## ref: https://hub.docker.com/r/sigp/lighthouse
image:
  pullPolicy: IfNotPresent
  repository: "consensys/teku"
  tag: "22.8.2"
  
## Init image is used to initialise validators
##
initImage:
  repository: "nethermindeth/validator-init"
  tag: "latest"
  pullPolicy: IfNotPresent
  
terminationGracePeriodSeconds: 900

## Spearate service account per validator.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
##
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  
## Node labels for pod assignment
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}

## Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
##
tolerations: {}

## Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
##
affinity: {}

## used to assign priority to pods
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## Vertical Pod Autoscaler config
## ref: https://github.com/kubernetes/autoscaler/tree/master/vertical-pod-autoscaler
##
verticalAutoscaler:
  # If true a VPA object will be created for the StatefulSet
  enabled: false
  updateMode: Off
  containerPolicies: {}
  
## Network ID
## Options for Ethereum: mainnet, prater, ropsten
## Options for Gnosis: gnosis
##
network: "ropsten"

## Existing vault endpoint
## example: http://vault.vault:8200
##
vault:
  endpoint: ""
  validatorsMountPath: ""
  kubernetesAuthName: ""

## Mev-boost enabled
##
mevBoost:
  enabled: false
  gasLimit: "29000000"
  batchSize: "50"
  
## Merge configuration
merge:
  enabled: false
  feeRecipient: ""
  
## Validators extra flags
##
extraFlags: []
## List of Beacon Chain node addresses
## If not specified, will connect to prysm/lighthouse beacon nodes
## deployed with this helm chart
##
beaconChainRpcEndpoints: []

## Randomize endpoints if specified
## Has a higher priority than beaconChainRpcEndpoints,
## all specified hosts will be randomly assigned to all validators,
## used to more evenly distribute the load
##
beaconChainRpcEndpointsRandomized: []

## You can use the graffiti to add a string to your proposed blocks,
## which will be seen on the block explorer.
## ref: https://docs.prylabs.network/docs/prysm-usage/parameters#validator-configuration
##
graffiti: ""

## Monitoring
##
metrics:
  # Whether to enable metrics collection or not
  enabled: true

  # Prometheus exporter port
  port: 9090

  # Extra flags to pass for collecting metrics
  flags:
    - "--metrics-enabled=true"
    - "--metrics-host-allowlist=*"
    - "--metrics-interface=0.0.0.0"
    - "--metrics-port=9090"
    
  ## Prometheus Service Monitor
  ## ref: https://github.com/coreos/prometheus-operator
  ##      https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor resource(s) for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.serviceMonitor.namespace The namespace in which the ServiceMonitor will be created
    ##
    namespace: ""
    ## @param metrics.serviceMonitor.interval The interval at which metrics should be scraped
    ##
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout The timeout after which the scrape is ended
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.relabellings Metrics RelabelConfigs to apply to samples before scraping.
    ##
    relabellings: []
    ## @param metrics.serviceMonitor.metricRelabelings Metrics RelabelConfigs to apply to samples before ingestion.
    ##
    metricRelabelings: []
    ## @param metrics.serviceMonitor.honorLabels Specify honorLabels parameter to add the scrape endpoint
    ##
    honorLabels: false
    ## @param metrics.serviceMonitor.additionalLabels Additional labels that can be used so ServiceMonitor resource(s) can be discovered by Prometheus
    ##
    additionalLabels: {}
  ## Custom PrometheusRule to be defined
  ## ref: https://github.com/coreos/prometheus-operator#customresourcedefinitions
  ##
  prometheusRule:
    ## @param metrics.prometheusRule.enabled Create a custom prometheusRule Resource for scraping metrics using PrometheusOperator
    ##
    enabled: false
    ## @param metrics.prometheusRule.default Create a default set of Alerts
    ##
    default: true
    ## @param metrics.prometheusRule.namespace The namespace in which the prometheusRule will be created
    ##
    namespace: ""
    ## @param metrics.prometheusRule.additionalLabels Additional labels for the prometheusRule
    ##
    additionalLabels: {}
    ## @param metrics.prometheusRule.rules Custom Prometheus rules
    ## e.g:
    ## rules:
    ##   prysm:
    ##     - alert: PrysmValidatorHourlyEarningLessOrEqual0
    ##       expr: sum(validator_balance) - sum(validator_balance offset 1h) - count(validator_balance > 16)*32 + count(validator_balance offset 1h > 0)*32
    ##       for: 5m
    ##       labels:
    ##         severity: critical
    ##       annotations:
    ##         summary: Prysm validator hourly earning <= 0
    ##         description: Check validators immediately. Pod - {{ printf "{{ $labels.pod }}" }}. Namespace - {{ printf "{{ $labels.namespace }}" }}
    ##     - alert: PrysmValidatorAlotOfErrorsLastHour
    ##       expr: sum(delta(log_entries_total{job='{{ include "operator.fullname" . }}-validator', level="error"}[1h]) > 0) 
    ##       for: 5m
    ##       labels:
    ##         severity: warning
    ##       annotations:
    ##         summary: Many validator errors or warnings last hour
    ##         description: Check validator {{ printf "{{ $labels.pod }}" }}. Namespace - {{ printf "{{ $labels.namespace }}" }}
    ##   lighthouse: []
    ##
    rules: {}

## Configure resource requests and limits.
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources: {}

## Configure liveness and readiness probes
## https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
##
readinessProbe:
  initialDelaySeconds: 60
  timeoutSeconds: 1
  periodSeconds: 60
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /metrics
    port: metrics
    scheme: HTTP
livenessProbe:
  initialDelaySeconds: 60
  timeoutSeconds: 1
  periodSeconds: 60
  failureThreshold: 3
  successThreshold: 1
  httpGet:
    path: /metrics
    port: metrics
    scheme: HTTP

## If false, data ownership will not be reset at startup
## This allows the geth node to be run with an arbitrary user
##
initChownData: true

## Whether or not to allocate persistent volume disk for the data directory.
## In case of pod failure, the pod data directory will still persist.
##
persistence:
  enabled: true
  storageClassName: ""
  accessModes:
    - ReadWriteOnce
  size: 5Gi
