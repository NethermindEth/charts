# Default values for generic-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

deploymentStrategy: {}
#deploymentAnnotations: {}

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

secretManager:
  enabled: false
  # env:
  #   - name: APP_ENV # The APP_ENV variable must be set for the secretManager, it is used to select the proper secret envfile
  #     value: "DEV"
  pvc:
    create: true
    # Use the "name" to overwrite the templated name "generic-app.fullname"-secrets. Designed to be used with an existing PVC.
    # name: "myPvc"
    storageClassName: efs-retain
    accessModes:
      - ReadWriteMany
    size: 1G

initContainers:
  []
  # - name: init-myservice
  #   image: busybox:1.28
  #   command: ['sh', '-c', "until nslookup myservice.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for myservice; sleep 2; done"]

# If you want to use command and args try the following
# command: ["/bin/sh"]
# args:
#   - "-c"
#   - "echo $(date)"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

# Custom labels apply to the deployment and the pods
commonLabels:
  {}
  # app: my-app

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Environment variables applies directly to the container
env: {}
#  GLOBAL_CONFIG: "dummy-value"
#  TEST_CONFIG: "something"

# Environment variables using the "valueFrom" format
valuesFrom: []
#  - name: "variable-name"
#    valueFrom:
#      configMapKeyRef:
#        name: configmap-name
#        key: CONFIGMAP_VALUE_KEY
#  - name: MY_NODE_NAME
#    valueFrom:
#      fieldRef:
#        fieldPath: spec.nodeName

# Environment variables coming from a configMap
# configMapEnv: "configmap-name"

# Environment variables coming from a secret
# secretEnv: "secret-name"

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  enabled: false
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http

ingress:
  enabled: false
  className: "nginx"
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# resources: {}
#   We usually recommend not to specify default resources and to leave this as a conscious
#   choice for the user. This also increases chances charts run on environments with little
#   resources, such as Minikube. If you do want to specify resources, uncomment the following
#   lines, adjust them as necessary, and remove the curly braces after 'resources:'.
#   limits:
#     cpu: 100m
#     memory: 128Mi
#   requests:
#     cpu: 100m
#     memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

persistence:
  enabled: false
  volumeName: "my-data"
  annotations: {}
  #storageClassName: "gp2"
  accessModes:
    - ReadWriteOnce
  size: 8Gi

nodeSelector: {}

tolerations: []

affinity: {}

ports: {}
#  - name: any-port-name
#    containerPort: 8080

livenessProbe: {}
#  httpGet:
#    path: /some-path
#    port: any-port-name
#  initialDelaySeconds: 5
#  periodSeconds: 10
#  failureThreshold: 2

readinessProbe: {}
#  httpGet:
#    path: /some-path
#    port: any-port-name
#  initialDelaySeconds: 5
#  periodSeconds: 5
#  failureThreshold: 3

volumes: {}
volumeMounts: {}
