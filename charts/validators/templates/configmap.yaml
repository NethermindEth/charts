---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "validators.fullname" . }}-init
  labels:
    {{- include "validators.labels" . | nindent 4 }}
data:
  init-beacon-endpoints.sh: |
    #!/bin/bash
    echo "Looking for beacon endpoints for validator client: $BEACON_CLIENT, counter: $COUNTER"
    BEACON_CLIENT=lighthouse
    counter=$COUNTER
    if [[ -n "${BEACON_CHAIN_RPC_ENDPOINTS_RANDOMIZED}" ]]; then
        beacon_endpoints="${BEACON_CHAIN_RPC_ENDPOINTS_RANDOMIZED}"
    else
        BEACON_PODS=$(kubectl -n ${POD_NAMESPACE} get pods -l "beacon=$BEACON_CLIENT" -o jsonpath='{.items[*].metadata.name}')
        BEACON_API_SERVICES=$(kubectl -n ${POD_NAMESPACE} get services -l "type=api,beacon=$BEACON_CLIENT" -o jsonpath='{.items[*].metadata.name}')
        # Extract metadata.name fields
        IFS=' ' read -r -a beacon_service_names <<< "$BEACON_API_SERVICES"
        IFS=' ' read -r -a beacon_pod_names <<< "$BEACON_PODS"
        echo "Pod names:"
        printf '%s\n' "${beacon_pod_names[@]}"
        # Calculate the number of endpoints and pods
        num_endpoints=${#beacon_service_names[@]}
        num_pods=${#beacon_pod_names[@]}
        # Calculate the index range for each pod
        if [ "$counter" -ne 0 ]; then
            # Calculate the start index based on counter
            start_index=$((($counter - 1) % $num_pods))
            # Rearrange the pod names based on start_index
            rearranged_pod_names=("${beacon_pod_names[@]:$start_index}" "${beacon_pod_names[@]:0:$start_index}")
        else
            rearranged_pod_names=("${beacon_pod_names[@]}")
        fi
        # Variable to store beacon endpoints
        beacon_endpoints=""
        # Loop through the endpoint range for each pod
        for ((i = 0; i < $num_endpoints; i++)); do
            service=${beacon_service_names[$i]}
            echo "API Service: $service"
            # Loop through rearranged_pod_names and echo pods with matching name
            for pod in "${rearranged_pod_names[@]}"; do
                if [[ $pod == *"$service"* ]]; then
                    echo "  Matching Pod: $pod"
                    beacon_endpoint="http://$pod.$service.$POD_NAMESPACE:$BEACON_PORT"
                    # Append the beacon_endpoint to beacon_endpoints
                    if [ -z "$beacon_endpoints" ]; then
                        beacon_endpoints="$beacon_endpoint"
                    else
                        beacon_endpoints="$beacon_endpoints,$beacon_endpoint"
                    fi
                    echo "  Beacon Endpoint for Validator: $beacon_endpoint"
                fi
            done
        done
        # Store beacon_endpoints in the file
        echo "BEACON_ENDPOINTS=$beacon_endpoints" > /data/beacon_endpoints.txt
        kubectl annotate pod "$POD_NAME" beacon-endpoints="$beacon_endpoints" --namespace="$POD_NAMESPACE"
        cat /data/beacon_endpoints.txt
    fi
