---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" . }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" . }}
  labels:
    {{- include "common.labels.statefulset" . | nindent 4 }}
spec:
  replicas: {{ .Values.global.replicaCount }}
  podManagementPolicy: "Parallel"
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  serviceName: {{ include "common.names.fullname" . }}
  template:
    metadata:
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
    {{- with (concat .Values.prysm.imagePullSecrets .Values.prysm.imagePullSecrets) }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.affinity }}
      affinity:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.global.tolerations }}
      tolerations:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.global.nodeSelector }}
      nodeSelector:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- with .Values.global.securityContext }}
      securityContext:
        {{ toYaml . | nindent 8 | trim }}
    {{- end }}
    {{- if .Values.geth.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.global.terminationGracePeriodSeconds }}
    {{- end }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      priorityClassName: {{ .Values.global.priorityClassName | quote }}
      initContainers:
        - name: init-geth
          image: "{{ .Values.geth.initImage.repository }}:{{ .Values.geth.initImage.tag }}"
          imagePullPolicy: {{ .Values.geth.initImage.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              echo "Namespace: ${POD_NAMESPACE} Pod: ${POD_NAME}";
          {{- if .Values.geth.p2pNodePort.enabled }}
            {{- if eq .Values.geth.p2pNodePort.type "LoadBalancer" }}
              until [ -n "$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do echo "Waiting for load balancer gets an IP" && sleep 10; done;
              export EXTERNAL_PORT=$(kubectl -n ${POD_NAMESPACE} get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
            {{- else }}
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
            {{- end }}
              echo "EXTERNAL_PORT=$EXTERNAL_PORT" >  /env/init-nodeport;
              echo "EXTERNAL_IP=$EXTERNAL_IP"     >> /env/init-nodeport;
              cat /env/init-nodeport;
          {{- end }}
          {{- if and .Values.geth.persistence.enabled .Values.geth.initChownData }}
              mkdir -p /data && chown -R {{ .Values.global.securityContext.runAsUser }}:{{ .Values.global.securityContext.runAsUser }} /data;
          {{- end }}
          volumeMounts:
            - name: env-nodeport-geth
              mountPath: /env
        - name: init-prysm
          image: "{{ .Values.prysm.initImage.repository }}:{{ .Values.prysm.initImage.tag }}"
          imagePullPolicy: {{ .Values.prysm.initImage.pullPolicy }}
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - sh
            - -c
            - >
              echo "Namespace: ${POD_NAMESPACE} Pod: ${POD_NAME}";
          {{- if .Values.prysm.p2pNodePort.enabled }}
              {{- if eq .Values.prysm.p2pNodePort.type "LoadBalancer" }}
              until [ -n "$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')" ]; do echo "Waiting for load balancer gets an IP" && sleep 10; done;
              export EXTERNAL_PORT=$(kubectl -n ${POD_NAMESPACE} get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl -n ${POD_NAMESPACE} get svc/${POD_NAME} -o jsonpath='{.status.loadBalancer.ingress[0].ip}');
              {{- else }}
              export EXTERNAL_PORT=$(kubectl get services -l "pod in (${POD_NAME}), type in (p2p)" -o jsonpath='{.items[0].spec.ports[0].nodePort}');
              export EXTERNAL_IP=$(kubectl get nodes "${NODE_NAME}" -o jsonpath='{.status.addresses[?(@.type=="ExternalIP")].address}');
              {{- end }}
              echo "p2p-host-ip: $EXTERNAL_IP"   > /config/config.yaml;
              echo "p2p-tcp-port: $EXTERNAL_PORT" >> /config/config.yaml;
              echo "p2p-udp-port: $EXTERNAL_PORT" >> /config/config.yaml;
          {{- else }}
              echo "p2p-host-ip: $POD_IP"   > /config/config.yaml;
              echo 'p2p-tcp-port: {{ include "prysm.p2pPort" . }}' >> /config/config.yaml;
              echo 'p2p-udp-port: {{ include "prysm.p2pPort" . }}' >> /config/config.yaml;
          {{- end }}
              INDEX=$((${HOSTNAME##*-}+1));
              EE=$(sed "${INDEX}q;d" /data/scripts/execution-endpoints.txt);
              echo "http-web3provider: ${EE}" >> /config/config.yaml;
              echo "Pod will connect to the ${EE} endpoint";
              cat /config/config.yaml;
          {{- if and .Values.prysm.persistence.enabled .Values.prysm.initChownData }}
              chown -R {{ .Values.global.securityContext.runAsUser }}:{{ .Values.global.securityContext.runAsUser }} /data | true;
          {{- end }}
          volumeMounts:
            - name: config-prysm
              mountPath: /config
            - name: data-prysm
              mountPath: /data
            - name: scripts-prysm
              mountPath: /data/scripts
      {{- if or (eq .Values.global.network "mainnet") (eq .Values.global.network "prater") (eq .Values.global.network "ropsten") (eq .Values.global.network "sepolia") }}
        - name: download-genesis-state
          image: "curlimages/curl:latest"
          imagePullPolicy: {{ .Values.prysm.initImage.pullPolicy }}
          command: ['/bin/sh', '/data/scripts/entrypoint.sh']
          volumeMounts:
            - name: data-prysm
              mountPath: /data
            - name: scripts-prysm
              mountPath: /data/scripts
      {{- end }}
      containers:
        - name: geth
          image: "{{ .Values.geth.image.repository }}:{{ .Values.geth.image.tag }}"
          imagePullPolicy: {{ .Values.geth.image.pullPolicy }}
          command:
            - sh
            - -ac
            - >
            {{- if .Values.geth.p2pNodePort.enabled }}
              . /env/init-nodeport;
            {{- end }}
              exec geth
          {{- if .Values.global.JWTSecret }}
              --authrpc.jwtsecret=/secret/jwtsecret
              --authrpc.addr={{ .Values.geth.authRpc.addr }}
              --authrpc.port={{ .Values.geth.authRpc.port }}
              --authrpc.vhosts={{ .Values.geth.authRpc.vhosts }}
          {{- end }}
          {{- if .Values.geth.http.enabled }}
              --http
              --http.addr=0.0.0.0
              --http.port={{ .Values.geth.http.port }}
              --http.corsdomain={{ .Values.geth.http.corsDomain }}
              --http.vhosts={{ .Values.geth.http.vhosts }}
              --http.api={{ .Values.geth.http.api }}
          {{- end }}
              --maxpeers={{ .Values.geth.targetPeers }}
          {{- if .Values.geth.p2pNodePort.enabled }}
              --nat=extip:$EXTERNAL_IP
              --port=$EXTERNAL_PORT
          {{- else }}
              --nat=extip:$(POD_IP)
              --port={{ include "geth.p2pPort" . }}
          {{- end }}
          {{- if .Values.geth.ws.enabled }}
              --ws
              --ws.addr=0.0.0.0
              --ws.port={{ .Values.geth.ws.port }}
              --ws.origins={{ .Values.geth.ws.origins }}
              --ws.api={{ .Values.geth.ws.api }}
          {{- end }}
          {{- if .Values.geth.terminalTotalDifficulty }}
              --override.terminaltotaldifficulty={{ .Values.geth.terminalTotalDifficulty }}
          {{- end }}
              --datadir=/data/ethereum
              --ethash.dagdir=/data/ethereum/.ethash
              --ipcdisable
              --{{ .Values.global.network }}
          {{- range .Values.geth.extraFlags }}
              {{ . | quote }}
          {{- end }}
          {{- if .Values.global.metrics.enabled }}
          {{- range .Values.geth.metrics.flags }}
              {{ . | quote }}
          {{- end }}
          {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
          {{- if .Values.global.JWTSecret }}
            - name: authrpc
              containerPort: {{ .Values.geth.authRpc.port }}
          {{- end }}
          {{- if .Values.geth.http.enabled }}
            - name: http
              containerPort: {{ .Values.geth.http.port }}
          {{- end }}
          {{- if .Values.geth.ws.enabled }}
            - name: ws
              containerPort: {{ .Values.geth.ws.port }}
          {{- end }}
          {{- if .Values.global.metrics.enabled }}
            - name: metrics
              containerPort: {{ .Values.geth.metrics.port }}
          {{- end }}
          {{- if .Values.geth.p2pNodePort.enabled }}
            - name: p2p-tcp
              containerPort: {{ include "geth.p2pPort" . }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ include "geth.p2pPort" . }}
              protocol: UDP
          {{- end }}
          volumeMounts:
            - name: data-geth
              mountPath: /data/ethereum
          {{- if .Values.global.JWTSecret }}
            - name: jwtsecret
              mountPath: /secret
              readOnly: true
          {{- end }}
            - name: env-nodeport-geth
              mountPath: /env
        {{- with .Values.geth.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
        {{- end }}
      {{- if .Values.geth.http.enabled }}
        - name: sidecar-geth
          image: "{{ .Values.geth.sidecar.repository }}:{{ .Values.geth.sidecar.tag }}"
          imagePullPolicy: {{ .Values.geth.sidecar.pullPolicy }}
          env:
            - name: SERVER_BINDADDR
              value: "{{ .Values.geth.sidecar.bindAddr }}:{{ .Values.geth.sidecar.bindPort }}"
            - name: CLIENT_PORT
              value: {{ .Values.geth.http.port | quote }}
          ports:
            - containerPort: {{ .Values.geth.sidecar.bindPort }}
              name: sidecar
              protocol: TCP
        {{- if .Values.geth.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.geth.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.geth.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.geth.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.geth.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.geth.livenessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.geth.livenessProbe.httpGet.path }}
              port: {{ .Values.geth.livenessProbe.httpGet.port }}
              scheme: {{ .Values.geth.livenessProbe.httpGet.scheme }}
        {{- end }}
        {{- if .Values.geth.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.geth.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.geth.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.geth.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.geth.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.geth.readinessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.geth.readinessProbe.httpGet.path }}
              port: {{ .Values.geth.readinessProbe.httpGet.port }}
              scheme: {{ .Values.geth.readinessProbe.httpGet.scheme }}
        {{- end }}
      {{- end }}
        - name: prysm
        {{- if ne .Values.global.network "gnosis" }}
          image: "{{ .Values.prysm.image.repository }}:{{ .Values.prysm.image.tag }}"
          imagePullPolicy: {{ .Values.prysm.image.pullPolicy }}
        {{- else }}
          image: "{{ .Values.prysm.imageGnosis.repository }}:{{ .Values.prysm.imageGnosis.tag }}"
          imagePullPolicy: {{ .Values.prysm.imageGnosis.pullPolicy }}
        {{- end }}
          args:
            - "--datadir=/data"
            - "--rpc-host={{ .Values.prysm.rpc.host }}"
            - "--rpc-port={{ .Values.prysm.rpc.port }}"
            - "--accept-terms-of-use"
            - "--config-file=/config/config.yaml"
            - "--jwt-secret=/secret/jwtsecret"
          {{- if .Values.prysm.builderEndpoint }}
            - "--http-mev-relay={{ .Values.prysm.builderEndpoint }}"
          {{- end }}

          {{- if .Values.prysm.suggestedFeeRecipient }}
            - "--suggested-fee-recipient={{ .Values.prysm.suggestedFeeRecipient }}"
          {{- end }}

          {{- if .Values.prysm.totalDifficultyOverride }}
            - "--terminal-total-difficulty-override={{ .Values.prysm.totalDifficultyOverride }}"
          {{- end }}
          {{- if .Values.prysm.global.checkPointSync.enabled }}
            - "--checkpoint-sync-url={{ .Values.prysm.global.checkPointSync.url }}"
            - "--genesis-beacon-api-url={{ .Values.prysm.global.checkPointSync.url }}"
          {{- end }}
          {{- if or (eq .Values.global.network "mainnet") (eq .Values.global.network "prater") (eq .Values.global.network "ropsten") (eq .Values.global.network "sepolia") }}
            - "--genesis-state=/data/genesis.ssz"
          {{- end }}

          {{- if ne .Values.global.network "gnosis" }}
            - "--{{ .Values.global.network }}"
          {{- else }}
            - "--contract-deployment-block=19469077"
            - "--bootstrap-node=/data/gnosis-config/bootnodes.yaml"
            - "--config-file=/data/gnosis-config/config.yaml"
            - "--chain-config-file=/data/gnosis-config/config.yaml"
          {{- end }}

          {{- range .Values.prysm.extraFlags }}
            - {{ . | quote }}
          {{- end }}

          {{- if .Values.global.metrics.enabled }}
            - "--monitoring-port={{ .Values.prysm.metrics.port }}"
            - "--monitoring-host=0.0.0.0"
          {{- else }}
            - "--disable-monitoring"
          {{- end }}

          {{- if .Values.prysm.http.enabled }}
            - "--grpc-gateway-host=0.0.0.0"
            - "--grpc-gateway-port={{ .Values.prysm.http.port }}"
          {{- else }}
            - "--disable-grpc-gateway"
          {{- end }}
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - containerPort: {{ .Values.prysm.rpc.port }}
              name: {{ .Values.prysm.rpc.portName }}
              protocol: TCP
          {{- if .Values.prysm.p2pNodePort.enabled }}
            - name: p2p-tcp
              containerPort: {{ include "prysm.p2pPort" . }}
              protocol: TCP
            - name: p2p-udp
              containerPort: {{ include "prysm.p2pPort" . }}
              protocol: UDP
          {{- end }}
          {{- if .Values.prysm.http.enabled }}
            - containerPort: {{ .Values.prysm.http.port }}
              name: http
              protocol: TCP
          {{- end }}
          {{- if .Values.global.metrics.enabled }}
            - containerPort: {{ .Values.prysm.metrics.port }}
              name: metrics
              protocol: TCP
          {{- end }}
          volumeMounts:
            - name: data-prysm
              mountPath: /data
            - name: jwtsecret
              mountPath: /secret
              readOnly: true
            - name: config-prysm
              mountPath: /config
          {{- if eq .Values.global.network "gnosis" }}
            - name: gnosis-config-prysm
              mountPath: /data/gnosis-config
          {{- end }}
        {{- with .Values.prysm.resources }}
          resources:
            {{ toYaml . | nindent 12 | trim }}
        {{- end }}
      {{- if .Values.prysm.http.enabled }}
        - name: sidecar-prysm
          image: "{{ .Values.prysm.sidecar.repository }}:{{ .Values.prysm.sidecar.tag }}"
          imagePullPolicy: {{ .Values.prysm.sidecar.pullPolicy }}
          env:
            - name: SERVER_BINDADDR
              value: "{{ .Values.prysm.sidecar.bindAddr }}:{{ .Values.prysm.sidecar.bindPort }}"
            - name: CLIENT_PORT
              value: {{ .Values.prysm.http.port | quote }}
          ports:
            - containerPort: {{ .Values.prysm.sidecar.bindPort }}
              name: sidecar
              protocol: TCP
        {{- if or .Values.prysm.livenessProbe.enabled }}
          livenessProbe:
            initialDelaySeconds: {{ .Values.prysm.livenessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.prysm.livenessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.prysm.livenessProbe.periodSeconds }}
            failureThreshold: {{ .Values.prysm.livenessProbe.failureThreshold }}
            successThreshold: {{ .Values.prysm.livenessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.prysm.livenessProbe.httpGet.path }}
              port: {{ .Values.prysm.livenessProbe.httpGet.port }}
              scheme: {{ .Values.prysm.livenessProbe.httpGet.scheme }}
        {{- end }}
        {{- if .Values.prysm.readinessProbe.enabled }}
          readinessProbe:
            initialDelaySeconds: {{ .Values.prysm.readinessProbe.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.prysm.readinessProbe.timeoutSeconds }}
            periodSeconds: {{ .Values.prysm.readinessProbe.periodSeconds }}
            failureThreshold: {{ .Values.prysm.readinessProbe.failureThreshold }}
            successThreshold: {{ .Values.prysm.readinessProbe.successThreshold }}
            httpGet:
              path: {{ .Values.prysm.readinessProbe.httpGet.path }}
              port: {{ .Values.prysm.readinessProbe.httpGet.port }}
              scheme: {{ .Values.prysm.readinessProbe.httpGet.scheme }}
        {{- end }}
      {{- end }}
      volumes:
        - name: jwtsecret
          secret:
            secretName: {{ include "common.names.fullname" . }}
        - name: config-prysm
          emptyDir: {}
      {{- if eq .Values.global.network "gnosis" }}
        - name: gnosis-config-prysm
          configMap:
            name: {{ include "common.names.fullname" . }}-gnosis
      {{- end }}
      {{- if or (eq .Values.global.network "mainnet") (eq .Values.global.network "prater") (eq .Values.global.network "ropsten") (eq .Values.global.network "sepolia") }}
        - name: scripts-prysm
          configMap:
            name: {{ include "common.names.fullname" . }}
      {{- end }}
{{- if (not .Values.prysm.persistence.enabled) }}
        - name: data-prysm
          emptyDir: {}
{{- end }}
        - name: env-nodeport-geth
          emptyDir: {}
{{- if (not .Values.geth.persistence.enabled) }}
        - name: data-geth
          emptyDir: {}
{{- end }}
  volumeClaimTemplates:
    - metadata:
        name: data-geth
        labels:
          {{- include "common.labels.statefulset" . | nindent 10 }}
      {{- with .Values.geth.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ .Values.geth.persistence.accessModes }}
        storageClassName: {{ .Values.geth.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.geth.persistence.size | quote }}
    - metadata:
        name: data-prysm
        labels:
          {{- include "common.labels.statefulset" . | nindent 10 }}
      {{- with .Values.prysm.persistence.annotations }}
        annotations:
          {{ toYaml . | nindent 10 | trim }}
      {{- end }}
      spec:
        accessModes: {{ .Values.prysm.persistence.accessModes }}
        storageClassName: {{ .Values.prysm.persistence.storageClassName }}
        resources:
          requests:
            storage: {{ .Values.prysm.persistence.size | quote }}




