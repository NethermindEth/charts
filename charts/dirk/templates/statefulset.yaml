{{- $root := . -}}
{{- $counter := 0 }}
{{- range (untilStep 1 (int (add1 .Values.replicaCount)) 1) }}

---
apiVersion: {{ include "common.capabilities.statefulset.apiVersion" $root }}
kind: StatefulSet
metadata:
  name: {{ include "common.names.fullname" $root }}-{{.}}
  labels:
    {{- include "common.labels.standard" $root | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" $root | nindent 6 }}
  serviceName: {{ include "common.names.fullname" $root }}
  template:
    metadata:
      {{- with $root.Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "common.labels.matchLabels" $root | nindent 8 }}
    spec:
      {{- with $root.Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with $root.Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dirk.serviceAccountName" $root }}
      securityContext:
        {{- toYaml $root.Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: init
          image: "{{ $root.Values.initImage.repository }}:{{ $root.Values.initImage.tag }}"
          imagePullPolicy: {{ $root.Values.initImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          command:
            - sh
            - -ac
            - >
              mkdir -p /data/dirk/dirk-{{.}}/certs /data/keystore;
              cp /config/dirk.yaml /data/dirk/dirk-{{.}}/;
              printenv dirk-ca.crt | base64 -d  > /data/dirk/dirk-{{.}}/certs/ca.crt;
              printenv dirk-{{ . }}.crt | base64 -d  > /data/dirk/dirk-{{.}}/certs/dirk-{{ . }}.crt;
              printenv dirk-{{ . }}.key | base64 -d  > /data/dirk/dirk-{{.}}/certs/dirk-{{ . }}.key;
              chown -R {{ $root.Values.podSecurityContext.runAsUser }}:{{ $root.Values.podSecurityContext.fsGroup }} /data/dirk;
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" $root }}
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
        - name: fetch-keys
          image: "{{ $root.Values.cliImage.repository }}:{{ $root.Values.cliImage.tag }}"
          imagePullPolicy: {{ $root.Values.cliImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" $root }}
          args:
          - "sync-dirk-keys"
          - "--db-url-env"
          - "ESO_DB_KEYSTORE_URL"
          - "--wallet-dir"
          - "/tmp/dirk"
          - "--decryption-key-env"
          - "ESO_DECRYPTION_KEY"
          - "--index"
          - "{{ . }}"
          volumeMounts:
            - name: data
              mountPath: /data
      containers:
        - name: dirk
          image: "nethermindeth/dirk-debug:0.0.1"
          imagePullPolicy: {{ $root.Values.image.pullPolicy }}
          securityContext:
            runAsUser: 0
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" $root }}
          command: ["/bin/bash"]
          args: [ "while true; do sleep 30; done;" ]
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
        - name: sleeper
          image: "bash:latest"
          imagePullPolicy: {{ $root.Values.cliImage.pullPolicy }}
          securityContext:
            runAsUser: 0
          envFrom:
            - secretRef:
                name: eso-{{ include "common.names.fullname" $root }}
          command: [ "/usr/local/bin/bash", "-c", "--" ]
          args: [ "while true; do sleep 30; done;" ]
          volumeMounts:
            - name: data
              mountPath: /data
            - name: config
              mountPath: /config
      volumes:
        - name: config
          configMap:
            name: {{ include "common.names.fullname" $root }}-{{.}}
        - name: data
          emptyDir:
            medium: Memory
            sizeLimit: 128Mi

{{- end }}