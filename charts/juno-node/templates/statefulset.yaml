apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: {{ .Values.deployment.projectName }}
    namespace: {{ .Values.deployment.namespace }}
    annotations:
      prometheus.io/scrapenode: 'true'
      prometheus.io/path: '/metrics'
      prometheus.io/port: '9090'
spec:
  selector:
    matchLabels:
      app: {{ .Values.deployment.projectName }}
  serviceName: {{ .Values.deployment.projectName }}
  replicas: {{ .Values.deployment.replicas }}
  template:
    metadata:
      annotations:
        prometheus.io/scrapenode: 'true'
        prometheus.io/path: '/metrics'
        prometheus.io/port: '9090'
      labels:
         app: {{ .Values.deployment.projectName }}
    spec:   
      {{- if .Values.nodeSelector.enabled }}
      nodeSelector:
      {{- range $key, $value := $.Values.nodeSelector.label }}
         {{ $key }}: {{ $value }}
      {{- end }}
      {{- end }}
      {{- if .Values.taintsToleration.enabled }}
      tolerations:
      {{- range $key, $value := $.Values.taintsToleration.tolerations }}
         - key: {{ $key }}
           value: {{ $value }}
           effect: "NoSchedule"
      {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      initContainers:
      - name: init
        image: ubuntu:latest
        command: ["/bin/sh","-c"]
        args:
        {{- if .Values.deployment.snapshotUrl }}
        {{- range $.Values.pvc.mount }}
          - if [ ! -f {{ .mountPath }}/CURRENT ]; then
              apt update; 
              apt install -y wget;
              wget {{ $.Values.deployment.snapshotUrl }} -O {{ .mountPath }}/file.tar;
              tar -xvf {{ .mountPath }}/file.tar -C {{ .mountPath }} --strip-components 1;
              rm -r {{ .mountPath }}/file.tar;
            else
              echo "Node Synced";
            fi
        {{- end }}
        {{- else }}
          - echo "Syncing without Snapshot"
        {{- end }}
        {{- if $.Values.env.enabled }}
        env:
        {{- range .Values.env.data }}
          - name: {{ .name }}
            value: {{ quote .value }}
        {{- end }}
        {{- end }}
        {{- if .Values.pvc.enabled }}
        volumeMounts:
        {{- range $.Values.pvc.mount }}
          - mountPath: {{ .mountPath }}
            name: {{ $.Values.deployment.projectName }}-{{ .pvName }}
        {{- end }}
        {{- end }}

      containers:
      {{- if .Values.pgo.enabled }}
      - name: {{ .Values.deployment.projectName }}-pgo
        image: {{ .Values.pgo.image }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ .Values.pgo.port }}
        envFrom:
          - configMapRef:
                name: {{ .Values.deployment.projectName }}
        env:
          - name: SERVICE
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        resources:
          requests:
            memory: {{ .Values.pgo.resources.requests.memory }}
            cpu: {{ .Values.pgo.resources.requests.cpu }}
          limits:
            memory: {{ .Values.pgo.resources.limits.memory }}
            cpu: {{ .Values.pgo.resources.limits.cpu }}
      {{- end }}      
      - name: {{ .Values.deployment.projectName }}
        image: {{ .Values.deployment.imagename }}:{{ .Values.deployment.imagetag }}
        imagePullPolicy: Always
        ports:
        {{- range .Values.deployment.port }}
         - name: port-{{ . }}
           containerPort: {{ . }}
           protocol: TCP
        {{- end }}
        {{- if .Values.secret }}
        env:
          - name: JUNO_GW_API_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.secret.feederGateway.targetName }}
                key: {{ .Values.secret.feederGateway.secretKey }}
        {{- end }}
        {{- if $.Values.deployment.healthCheck.enabled }}
        readinessProbe:
          exec:
            command:
            - bash
            - -c
            - |
              res=`curl -s localhost:9090 | awk '/sync_best_known_block_number/ { bn = $2 } /sync_blockchain_height/ { bh = $2 } END { print bn - bh }'`
              if [ $res -eq 0 ]; then echo "Node synced" ; exit 0; else echo "Node is syncing" ; exit 1; fi
          initialDelaySeconds: {{ .Values.deployment.healthCheck.readinessProbe.initialDelaySeconds }}
          failureThreshold: {{ .Values.deployment.healthCheck.readinessProbe.failureThreshold }}
          periodSeconds: {{ .Values.deployment.healthCheck.readinessProbe.periodSeconds }}
        livenessProbe:
          exec:
            command:
            - bash
            - -c
            - |
              res=`curl -s localhost:9090 | awk '/sync_best_known_block_number/ { bn = $2 } /sync_blockchain_height/ { bh = $2 } END { print bn - bh }'`
              if [ $res -eq 0 ]; then echo "Node synced" ; exit 0; else echo "Node is syncing" ; exit 1; fi
          initialDelaySeconds: {{ .Values.deployment.healthCheck.livenessProbe.initialDelaySeconds }}
          failureThreshold: {{ .Values.deployment.healthCheck.livenessProbe.failureThreshold }}
          periodSeconds: {{ .Values.deployment.healthCheck.livenessProbe.periodSeconds }}
        {{- end }}
        args:
        {{- range $key, $value := .Values.args }}
         - {{ $key }}={{ $value }}
        {{- end }}
        resources:
{{ toYaml .Values.deployment.resources | indent 10 }}
        {{- if $.Values.env.enabled }}
        env:
        {{- range .Values.env.data }}
          - name: {{ .name }}
            value: {{ quote .value }}
        {{- end }}
        {{- end }}
        {{- if .Values.pvc.enabled }}

        volumeMounts:
        {{- range $.Values.pvc.mount }}
          - mountPath: {{ .mountPath }}
            name: {{ $.Values.deployment.projectName }}-{{ .pvName }}
        {{- end }}
        {{- end }}

 {{- if .Values.pvc.enabled }}
  volumeClaimTemplates:
  {{- range .Values.pvc.mount }}
  - metadata:
         name: {{ $.Values.deployment.projectName }}-{{ .pvName }}
    spec:
        {{- if $.Values.pvc.datasource }}
        dataSource:
           name: {{ $.Values.pvc.datasource }}
           kind: PersistentVolumeClaim
        {{- end }}
        accessModes:
            - ReadWriteOnce
        resources:
            requests:
                storage: {{ .storageSize }}
        storageClassName: {{ $.Values.pvc.storageClassName }}
{{- end }}
{{- end }}
