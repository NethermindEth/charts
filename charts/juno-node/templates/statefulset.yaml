apiVersion: apps/v1
kind: StatefulSet
metadata:
    name: {{ .Values.deployment.projectName }}
    namespace: {{ .Values.deployment.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.deployment.projectName }}
  serviceName: {{ .Values.deployment.projectName }}
  replicas: {{ .Values.deployment.replicas }}
  template:
    metadata:
      labels:
         app: {{ .Values.deployment.projectName }}
    spec:
      {{- if .Values.nodeSelector.enabled }}
      nodeSelector:
      {{- range $key, $value := $.Values.nodeSelector.label }}
         {{ $key }}: {{ $value }}
      {{- end }}
      {{- end }}
      {{- if .Values.taintsToleration.enabled }}
      tolerations:
      {{- range $key, $value := $.Values.taintsToleration.tolerations }}
         - key: {{ $key }}
           value: {{ $value }}
           effect: "NoSchedule"
      {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: 10
      {{- if .Values.serviceAccount.enabled }}
      serviceAccountName: {{ .Values.serviceAccount.name }}
      {{- end }}
      initContainers:
      - name: init
        image: ubuntu:latest
        command: ["/bin/sh","-c"]
        args:
        {{- if .Values.deployment.snapshotUrl }}
        {{- range $.Values.pvc.mount }}
          - if [ ! -f {{ .mountPath }}/CURRENT ]; then
              apt update; 
              apt install -y wget;
              wget {{ $.Values.deployment.snapshotUrl }} -O {{ .mountPath }}/file.tar;
              tar -xvf {{ .mountPath }}/file.tar -C {{ .mountPath }} --strip-components 1;
              rm -r {{ .mountPath }}/file.tar;
            else
              echo "Node Synced";
            fi
        {{- end }}
        {{- else }}
          - echo "Syncing without Snapshot"
        {{- end }}
        {{- if $.Values.env.enabled }}
        env:
        {{- range .Values.env.data }}
          - name: {{ .name }}
            value: {{ quote .value }}
        {{- end }}
        {{- end }}
        {{- if .Values.pvc.enabled }}
        volumeMounts:
        {{- range $.Values.pvc.mount }}
          - mountPath: {{ .mountPath }}
            name: {{ $.Values.deployment.projectName }}-{{ .pvName }}
        {{- end }}
        {{- end }}

      containers:
      - name: {{ .Values.deployment.projectName }}
        image: {{ .Values.deployment.imagename }}:{{ .Values.deployment.imagetag }}
        imagePullPolicy: Always
        ports:
        {{- range .Values.deployment.port }}
         - name: port-{{ . }}
           containerPort: {{ . }}
           protocol: TCP
        {{- end }}
        args:
         - --metrics
        {{- range $key, $value := .Values.args }}
         - {{ $key }}={{ $value }}
        {{- end }}
        resources:
{{ toYaml .Values.deployment.resources | indent 10 }}
        {{- if $.Values.env.enabled }}
        env:
        {{- range .Values.env.data }}
          - name: {{ .name }}
            value: {{ quote .value }}
        {{- end }}
        {{- end }}
        {{- if .Values.pvc.enabled }}
        volumeMounts:
        {{- range $.Values.pvc.mount }}
          - mountPath: {{ .mountPath }}
            name: {{ $.Values.deployment.projectName }}-{{ .pvName }}
        {{- end }}
        {{- end }}

 {{- if .Values.pvc.enabled }}
  volumeClaimTemplates:
  {{- range .Values.pvc.mount }}
  - metadata:
         name: {{ $.Values.deployment.projectName }}-{{ .pvName }}
    spec:
        accessModes:
            - ReadWriteOnce
        resources:
            requests:
                storage: {{ .storageSize }}
        storageClassName: {{ $.Values.pvc.storageClassName }}
{{- end }}
{{- end }}