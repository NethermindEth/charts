{{- if .Values.batchjob.enabled -}}
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: {{ .Values.deployment.projectName }}-deleter-role
  namespace: {{ .Values.deployment.namespace }}
rules:
- apiGroups: [""]
  resources: ["persistentvolumeclaims"]
  verbs: ["get", "list", "delete", "deletecollection"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.deployment.projectName }}-deleter-sa
  namespace: {{ .Values.deployment.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: {{ .Values.deployment.projectName }}-deleter-rolebinding
  namespace: {{ .Values.deployment.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pvc-deleter-role
subjects:
- kind: ServiceAccount
  name: pvc-deleter-sa
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.deployment.projectName }}-cronjob
  namespace: {{ .Values.deployment.namespace }}
spec:
  schedule: "{{ .Values.batchjob.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: post-delete-job
            image: "bitnami/kubectl"
            command:
            - "/bin/bash"
            - "-c"
            - |
                namespace="{{ .Values.deployment.namespace }}"
                pvcs=$(kubectl get pvc -n "$namespace" -o custom-columns=":metadata.name" --no-headers)
                 for pvc in $pvcs; do
                  describe_output=$(kubectl describe pvc -n "$namespace" "$pvc")
                   if echo "$describe_output" | grep -q "Used By:[[:space:]]*<none>"; then
                     echo "$pvc"
                     kubectl delete pvc $pvc;
                     sleep 5
                   fi
                 done
          restartPolicy: OnFailure
          serviceAccountName: {{ .Values.deployment.projectName }}-deleter-sa
          securityContext:
            runAsUser: 0
{{- end -}}