### Basic
deployment:
  projectName: goerli-test
  namespace: test
  replicas: 1
  imagename: nethermind/juno
  imagetag: v0.6.2
  snapshotUrl: ""  # if Value is Null sync start from 0 block
  resources:
    limits:
      cpu: "4"
      memory: 14Gi
    requests:
      cpu: "2"
      memory: 8Gi
  port:
  - 6060
  - 6061
  healthCheck:
    enabled: false
    livenessProbe:
      initialDelaySeconds: 9600
      failureThreshold: 6
      periodSeconds: 600
    readinessProbe:
      initialDelaySeconds: 9600
      failureThreshold: 6
      periodSeconds: 600

### Container Arguments
args:
  --http-port: "6060"
  --http-host: "0.0.0.0"
  --db-path: "/var/lib/juno"
  --network: "goerli"
  --metrics-host: "0.0.0.0"
  --metrics-port: "9090"
  --http: "true"
  --metrics: "true"
  --pending-poll-interval: "2s"
  --ws: "true"
  --ws-port: "6061"
  --ws-host: "0.0.0.0"

### Node selector and Tanits
nodeSelector:
  enabled: false
  label:
    network: juno

taintsToleration:
  enabled: false
  tolerations:
    network: juno

  ### Configmap


  ### PGO Container
pgo:
  enabled: false
  image: "gcr.io/juno-dev-nth/node-pgo-monitor:4.0"
  port: 3000
  resources:
    limits:
      cpu: "2"
      memory: 4Gi
    requests:
      cpu: "1"
      memory: 2Gi
  config:
    BUCKET: "gs://juno-prod-pgo-bucket"
    DURATION: "30"
    ITERATION: "10"
    ENV: "juno-integration"
    URL: "http://localhost:6062/debug/pprof/profile"

   ## cache warmup side container
cache:
  enabled: false
  image: "us-east1-docker.pkg.dev/juno-stg-nth/juno-cache/cache:2.0"
  resources:
    limits:
      cpu: "100m"
      memory: 512Mi
    requests:
      cpu: "100m"
      memory: 100Mi

  ### Service account
serviceAccount:
  enabled: false
  name: "juno-pgo"
  gcpServiceAccount: "monitoring-sa-euw1@juno-prod-nth.iam.gserviceaccount.com"

### Networking Service
svc:
  globalStaticIpName: ""
  globalStaticInternalIpName: ""
  externalTrafficPolicy: ""
  rpc:
    clustertype: ClusterIP     # Support: LoadBalancer, NodePort, ClusterIP
    port: "6060"
    backendConfig:
      timeoutSec: 400
      sessionAffinity:
        affinityType: "GENERATED_COOKIE"
      connectionDraining:
        drainingTimeoutSec: 300
      healthCheck:
        checkIntervalSec: 15
        timeoutSec: 15
        healthyThreshold: 1
        unhealthyThreshold: 2
        port: 6060
        type: HTTP
        requestPath: /
      customResponseHeaders:
        headers:
        - "X-Frame-Options: SAMEORIGIN"
        - "X-Content-Type-Options: nosniff"
        - "X-XSS-Protection: 1; mode=block"
        - "Referrer-Policy: no-referrer-when-downgrade"
        - "Strict-Transport-Security: max-age=63072000; includeSubDomains; preload"
    internalBackendConfig:
      timeoutSec: 400
      sessionAffinity:
        affinityType: "GENERATED_COOKIE"
      connectionDraining:
        drainingTimeoutSec: 300
      healthCheck:
        checkIntervalSec: 15
        timeoutSec: 15
        healthyThreshold: 1
        unhealthyThreshold: 2
        port: 6060
        type: HTTP
        requestPath: /
  wss:
    clustertype: ClusterIP     # Support: LoadBalancer, NodePort, ClusterIP
    port: "6061"
    backendConfig:
      timeoutSec: 400
      sessionAffinity:
        affinityType: "GENERATED_COOKIE"
      connectionDraining:
        drainingTimeoutSec: 300
      healthCheck:
        checkIntervalSec: 15
        timeoutSec: 15
        healthyThreshold: 1
        unhealthyThreshold: 2
        port: 6060
        type: HTTP
    internalBackendConfig:
      timeoutSec: 400
      sessionAffinity:
        affinityType: "GENERATED_COOKIE"
      connectionDraining:
        drainingTimeoutSec: 300
      healthCheck:
        checkIntervalSec: 15
        timeoutSec: 15
        healthyThreshold: 1
        unhealthyThreshold: 2
        port: 6060
        type: HTTP
        requestPath: /
    ## ALB Ingress Rules
    # Ingress
  ingress:
    enabled: true
    internal: false
    host: "test.juno.rpc.nethermind.dev"
    extraHost:
      enabled: false
      hosts:
        - ""
    rules:
      - host: "test.juno.rpc.nethermind.dev"
        http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
            service:
              name: goerli-test
              port:
                number: 6060
          - path: /ws
            pathType: ImplementationSpecific
            backend:
            service:
              name: goerli-test-wss
              port:
                number: 6061

### Horizontal pod scaling
hpa:
  enabled: false
  minReplicas: 1
  maxReplicas: 2
  cpuUtilization: 80

batchjob:
  enabled: false
  schedule: "* */1 * * *"
### Persistant Volume
pvc:
  enabled: true
  storageClassName: standard
  datasource: ""
  mount:
  - pvName: pv
    mountPath: /var/lib/juno
    storageSize: 250Gi

### ENVIRONMENT VARIABLES
env:
  enabled: false
  data:
  - name: NETWORK
    value: "juno"

### Back up juno data and upload to R2 cloud
backupJunoDataJob:
  enabled: true
  dataSource: "juno-sepolia-pv-ssd-juno-sepolia-0"
  backupSchedule: "0 0 * * *"
  cleanupSchedule: "0 12 * * *"
  network: "sepolia"
  storageSize: 200Gi
  retentionLimit: 10

secret:
  feederGateway:
    refreshInterval: 10m
    secretStoreName: juno-store
    secretStoreKind: ClusterSecretStore
    targetName: juno-goerli         # name of the k8s secret to be created
    targetCreationPolicy: Owner
    key: feeder-gateway             # name of the secret to target secret manager
    property: testnet               # name of the property to retrieve from secret manager
    version: "1"                    # version of secret
    secretKey: testnet              # name of the secret data key
  data:
    refreshInterval: 10m
    secretStoreName: juno-store           # external store name (ClusterSecretStore), it is used to connect to a secret manager.
    secretStoreKind: ClusterSecretStore   # external store name
    targetName: juno-sepolia-common       # name of the k8s secret to be created
    targetCreationPolicy: Owner
    dataFromKey: secret-store             # name of the secret in secret manager (GCP secret manager)
